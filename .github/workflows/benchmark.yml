name: Benchmarks

on:
  schedule:
    # Runs at 00:00 UTC every Friday
    - cron: '0 0 * * 5'
  workflow_dispatch:  # Enables manual trigger
    inputs:
      commit_hash:
        description: 'Commit hash to benchmark'
        default: 'main'

permissions:
  contents: write
  
concurrency:
  # This causes it to cancel previous in-progress actions on the same PR / branch,
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
  
jobs:
  benchmarks:
    runs-on: ubuntu-latest
    env:
      MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }}
      MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }}
      GITHUB_USERNAME: linkedin
      REPO_NAME: Liger-Kernel
      OUTPUT_DIR: benchmarks
      OUTPUT_FILENAME: benchmark.csv
      GENERATED_CSV: benchmark/data/all_benchmark_data.csv


    steps:
      # Step: Decide the commit hash to use
      - name: Determine commit hash to checkout
        id: choose_commit
        run: |
          if [ "${{ github.event.inputs.commit_hash }}" != "" ]; then
            echo "Using manual input commit: ${{ github.event.inputs.commit_hash }}"
            echo "commit=${{ github.event.inputs.commit_hash }}" >> $GITHUB_OUTPUT
          else
            echo "Using latest commit from main"
            git fetch origin main
            echo "commit=$(git rev-parse origin/main)" >> $GITHUB_OUTPUT
          fi

      # Step: Checkout full history so we can check out any commit
      - name: Checkout full repo history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important: so we can checkout arbitrary commit

      # Step: Checkout to the actual desired commit
      - name: Checkout to selected commit
        run: git checkout ${{ steps.choose_commit.outputs.commit }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install modal
          pip install pandas

      # Delete previous benchmark results.
      - name: Remove previous benchmark data
        run: |
          rm -f benchmark/data/all_benchmark_data.csv
          
      - name: Run benchmarks on GPU
        run: |
          modal run dev.modal.benchmarks
        
       # Step 5: Checkout gh-pages branch in a subfolderAdd commentMore actions
      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
      
      # Step 6: Copy benchmark CSV to gh-pages directory
      - name: Copy generated benchmark to gh-pages
        run: |
          mkdir -p gh-pages/${OUTPUT_DIR}/${{ steps.choose_commit.outputs.hash }}
          cp ${GENERATED_CSV} gh-pages/${OUTPUT_DIR}/${{ steps.choose_commit.outputs.hash }}/${OUTPUT_FILENAME}
      # Step 7: Append commit hash to commits.txt if not already present
      - name: Update commits.txt
        run: |
          cd gh-pages
          echo "commits.txt file path: ${OUTPUT_DIR}/commits.txt"
          # Create file if it doesn't exist
          mkdir -p ${OUTPUT_DIR}
          touch ${OUTPUT_DIR}/commits.txt
          # Append only if not already present
          if ! grep -q "${{ steps.choose_commit.outputs.hash }}" ${OUTPUT_DIR}/commits.txt; then
            echo "${{ steps.choose_commit.outputs.hash }}" >> ${OUTPUT_DIR}/commits.txt
          fi
      # Step 7: Commit and push
      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add .
          git commit -m "Add benchmark for commit ${{ steps.choose_commit.outputs.hash }}" || echo "No changes to commit"
          git push origin gh-pages

