{
  "add_bos_token": true,
  "add_eos_token": false,
  "add_prefix_space": null,
  "added_tokens_decoder": {
      "0": {
          "content": "<unk>",
          "lstrip": false,
          "normalized": false,
          "rstrip": false,
          "single_word": false,
          "special": true
      },
      "1": {
          "content": "<s>",
          "lstrip": false,
          "normalized": false,
          "rstrip": false,
          "single_word": false,
          "special": true
      },
      "2": {
          "content": "</s>",
          "lstrip": false,
          "normalized": false,
          "rstrip": false,
          "single_word": false,
          "special": true
      },
      "3": {
          "content": "<image>",
          "lstrip": false,
          "normalized": false,
          "rstrip": false,
          "single_word": false,
          "special": true
      },
      "4": {
          "content": "<pad>",
          "lstrip": false,
          "normalized": false,
          "rstrip": false,
          "single_word": false,
          "special": true
      }
  },
  "bos_token": "<s>",
  "clean_up_tokenization_spaces": false,
  "eos_token": "</s>",
  "extra_special_tokens": {
      "image_token": "<image>"
  },
  "image_token": "<image>",
  "legacy": false,
  "chat_template": "{%- if custom_tools is defined and custom_tools%}{%- set tools = custom_tools %}{%- endif %}{%- if tools is defined and tools %}{%- set tool_definition = tool_definition ~ (tools | tojson(indent=4)) %}{%- else %}{%- set tools = none %}{%- endif %}{%- if messages[0]['role'] == 'system' %}{%- set user_provided_system_message = true %}{%- if messages[0]['content'] is string %}{%- set system_message = messages[0]['content']|trim %}{%- else %}{%- set system_message = messages[0]['content'][0]['text']|trim %}{%- endif %}{%- set messages = messages[1:] %}{%- else %}{%- if tools is not none  %}{%- set system_message = \"You are a helpful assistant and an expert in function composition. You can answer general questions using your internal knowledge OR invoke functions when necessary. Follow these strict guidelines:\\n\\n1. FUNCTION CALLS:\\n- ONLY use functions that are EXPLICITLY listed in the function list below\\n- If NO functions are listed (empty function list []), respond ONLY with internal knowledge or \\\"I don't have access to [Unavailable service] information\\\"\\n- If a function is not in the list, respond ONLY with internal knowledge or \\\"I don't have access to [Unavailable service] information\\\"\\n- If ALL required parameters are present AND the query EXACTLY matches a listed function's purpose: output ONLY the function call(s)\\n- Use exact format: [func_name1(param1=value1, param2=value2), func_name2(...)]\\nExamples:\\nCORRECT: [get_weather(location=\\\"Vancouver\\\"), calculate_route(start=\\\"Boston\\\", end=\\\"New York\\\")] <- Only if get_weather and calculate_route are in function list\\nINCORRECT: get_weather(location=\\\"New York\\\")\\nINCORRECT: Let me check the weather: [get_weather(location=\\\"New York\\\")]\\nINCORRECT: [get_events(location=\\\"Singapore\\\")] <- If function not in list\\n\\n2. RESPONSE RULES:\\n- For pure function requests matching a listed function: ONLY output the function call(s)\\n- For knowledge questions: ONLY output text\\n- For missing parameters: ONLY request the specific missing parameters\\n- For unavailable services (not in function list): output ONLY with internal knowledge or \\\"I don't have access to [Unavailable service] information\\\". Do NOT execute a function call.\\n- If the query asks for information beyond what a listed function provides: output ONLY with internal knowledge about your limitations\\n- NEVER combine text and function calls in the same response\\n- NEVER suggest alternative functions when the requested service is unavailable\\n- NEVER create or invent new functions not listed below\\n\\n3. STRICT BOUNDARIES:\\n- ONLY use functions from the list below - no exceptions\\n- NEVER use a function as an alternative to unavailable information\\n- NEVER call functions not present in the function list\\n- NEVER add explanatory text to function calls\\n- NEVER respond with empty brackets\\n- Use proper Python/JSON syntax for function calls\\n- Check the function list carefully before responding\\n\\n4. TOOL RESPONSE HANDLING:\\n- When receiving tool responses: provide concise, natural language responses\\n- Don't repeat tool response verbatim\\n- Don't add supplementary information\\n\\nHere is a list of functions in JSON format that you can invoke:\\n\" %}{%- else %}{%- set system_message = \"\" %}{%- endif %}{%- endif %}{%- if system_message %}{{- \"<|header_start|>system<|header_end|>\\n\\n\" }}{{- system_message }}{%- if user_provided_system_message and tools %}{{- \"\\nHere is a list of functions in JSON format that you can invoke. Use exact format: [func_name1(param1=value1, param2=value2), func_name2(...)]\\n\" }}{{- tool_definition -}}{%- elif tool_definition %}{{- tool_definition -}}{%- endif %}{{- \"<|eot|>\" }}{%- endif %}{%- for message in messages %}{%- if not (message.role == 'ipython' or message.role == 'tool' or ('tool_calls' in message and  message.tool_calls|length != 0 )) %}{{- '<|header_start|>' + message['role'] + '<|header_end|>\\n\\n' }}{%- if message['content'] is string %}{{- message['content'] }}{%- else %}{%- for content in message['content'] %}{%- if content['type'] == 'image' %}{{- '<|image|>' }}{%- elif content['type'] == 'text' %}{{- content['text'] | trim }}{%- endif %}{%- endfor %}{%- endif %}{{- \"<|eot|>\" }}{%- elif 'tool_calls' in message %}{%- if message.role == 'assistant' %}{{- '<|header_start|>assistant<|header_end|>\\n\\n' -}}{%- if message['content'] is string %}{{- message['content'] }}{%- else %}{%- for content in message['content'] %}{%- if content['type'] == 'image' %}{{- '<|image|>' }}{%- elif content['type'] == 'text' %}{{- content['text'] }}{%- endif %}{%- endfor %}{%- endif %}{{- \"[\" }}{%- for tool_call in message.tool_calls %}{%- if tool_call.function is defined %}{%- set tool_call = tool_call.function %}{%- endif %}{{-  tool_call.name + '(' -}}{%- for param in tool_call.arguments %}{{- param + '=\"' -}}{{- \"%s\" | format(tool_call.arguments[param]) -}}{{- '\"' -}}{% if not loop.last %}, {% endif %}{%- endfor %}{{- ')' -}}{% if not loop.last %}, {% endif %}{%- endfor %}{{- \"]<|eot|>\" }}{%- endif %}{%- elif message.role == \"tool\" or message.role == \"ipython\" %}{{- \"<|header_start|>ipython<|header_end|>\\n\\n\" }}{%- if message.content is string %}{{-  message.content  | tojson }}{%- else %}{%- for content in message['content']  %}{%- if content['type']  == 'text' %}{{-  content['text'] | tojson }}{%- endif %}{%- endfor %}{%- endif %}{{- \"<|eot|>\" }}{%- endif %}{%- endfor %}{%- if add_generation_prompt %}{{- '<|header_start|>assistant<|header_end|>\\n\\n' }}{%- endif %}",
  "model_max_length": 1000000000000000019884624838656,
  "pad_token": "<pad>",
  "padding_side": "left",
  "processor_class": "Llama4Processor",
  "sp_model_kwargs": {},
  "tokenizer_class": "LlamaTokenizer",
  "trust_remote_code": false,
  "unk_token": "<unk>",
  "use_default_system_prompt": false,
  "return_token_type_ids": false
}